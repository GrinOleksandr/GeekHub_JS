
let state = {pos:0};
const cvs = document.getElementById("canvas");
const ctx = cvs.getContext("2d");
const image = document.getElementById("image1");
const image2 = document.getElementById("image2");
const newCvs = document.createElement("canvas");
// const content = document.getElementById("content");
// content.insertBefore(newCvs, cvs);

const newCtx = newCvs.getContext("2d");


document.addEventListener("click", function(event){

    if(state.pos === 2) {
        TweenMax.to(state, 1, {pos: 0});
    }

    else {
        TweenMax.to(state, 1, {pos: 2});
    }




});


let cols = 50;
let rows = 50;
let delay;

let xw = 1800/cols;
let xh = 1200/rows;

function renderTempCanvas(t){
    newCtx.clearRect(0,0,1800,1200);
    newCtx.drawImage(image2, 0, 0);
    //newCtx.clearRect(0,0,100 + t/10, 100 + t/10);


    xw = 1800/cols;
    xh = 1200/rows;
    for(let i = 0; i <=cols; i++){
        for(let j = 0; j <=rows; j++){
            delay = (j*i)/(cols*rows);
            newCtx.clearRect(i*xw, j*xh, xw*clamp(state.pos - delay, 0, 1), xh*clamp(state.pos - delay, 0, 1 ));
        }
    }



}

function clamp(number, min, max){
    if( number < min) {
        return min;
    }
    if ( number > max){
        return max;
    }
    else {
        return number;
    }
}

function render(t){

    ctx.drawImage(image, 0, 0);

    renderTempCanvas(t);

    ctx.drawImage(newCvs, 0, 0);




}

function setCanvasSize(cvs){
    cvs.width = 1800;
    cvs.height = 1200;
    cvs.style.width = "900px";
    cvs.style.height = "600px";
}

setCanvasSize(cvs);
setCanvasSize(newCvs);

function draw(t){
    render(t);
    window.requestAnimationFrame(draw);
}


draw();


_____________________________________________

let state = {pos:0};
const cvs = document.getElementById("canvas");
const ctx = cvs.getContext("2d");
 const image = document.getElementById("image" + 1).querySelector("img");
 const image2 = document.getElementById("image" + 2).querySelector("img");
const newCvs = document.createElement("canvas");
const newCtx = newCvs.getContext("2d");

 // var currentImage = document.getElementById("image1");
 // var nextImage = document.getElementById("image2");

//     for (let i = 1; i < 5; i++) {
//         let state = {pos:0};
//         currentImage = document.getElementById("image" + i).querySelector("img");
//         currentText = document.getElementById("image" + i).querySelector("p").innerText;
//         nextImage = document.getElementById("image" + (i + 1)).querySelector("img");
//         nextText = document.getElementById("image" + (i + 1)).querySelector("p").innerText;
//         TweenMax.to(state, 1, {pos: 2});
//     }
//
// } , 3000);

let allImages = document.querySelectorAll("img");
let imageCounter = 0;
let currentImage = allImages[0];
let nextImage = allImages[1];

document.addEventListener("click", function(){
    if (imageCounter >= (allImages.length -2)){
        imageCounter = 0;
    }

    if(state.pos === 2) {

            TweenMax.to(state, 1, {pos: 0});
    }
    else {
            TweenMax.to(state, 1, {pos: 2});
                }

    setTimeout(function(){
        currentImage = allImages[[].indexOf.call(allImages,nextImage)+1];
        nextImage =allImages[[].indexOf.call(allImages,currentImage)+1];

        imageCounter++;


    }, 1000);


});


let cols = 50;
let rows = 50;
let delay;

let xw = 1800/cols;
let xh = 1200/rows;

function renderTempCanvas(t) {
    newCtx.clearRect(0, 0, 1800, 1200);
    newCtx.drawImage(nextImage, 0, 0);
    //newCtx.clearRect(0,0,100 + t/10, 100 + t/10);


    xw = 1800 / cols;
    xh = 1200 / rows;
    for (let i = 0; i <= cols; i++) {
        for (let j = 0; j <= rows; j++) {
            delay = (j * i) / (cols * rows);
            newCtx.clearRect(i * xw, j * xh, xw * clamp(state.pos - delay, 0, 1), xh * clamp(state.pos - delay, 0, 1));
        }
    }
}

function clamp(number, min, max){
    if( number < min) {
        return min;
    }
    if ( number > max){
        return max;
    }
    else {
        return number;
    }
}

function render(t){

    ctx.drawImage(currentImage, 0, 0);

    renderTempCanvas(t);

    ctx.drawImage(newCvs, 0, 0);




}

function setCanvasSize(cvs){
    cvs.width = 1800;
    cvs.height = 1200;
    cvs.style.width = "900px";
    cvs.style.height = "600px";
}

setCanvasSize(cvs);
setCanvasSize(newCvs);

function draw(t){
    render(t);
    window.requestAnimationFrame(draw);
}


draw();

-----------------------------------------------------------------------------
let state = {pos:0};
const cvs = document.getElementById("canvas");
const ctx = cvs.getContext("2d");
let image = document.getElementById("image1");
let image2 = document.getElementById("image2");
let image3 = document.getElementById("image3");
let image4 = document.getElementById("image4");
const newCvs = document.createElement("canvas");
const btn1 = document.getElementById("btn1");
const btn2 = document.getElementById("btn2");
const btn3 = document.getElementById("btn3");
// const content = document.getElementById("content");
// content.insertBefore(newCvs, cvs);

const newCtx = newCvs.getContext("2d");


let drawMe = function (t){
    render(t, image, image2);
    window.requestAnimationFrame(drawMe);
};


btn1.addEventListener("click", function(event){
    drawMe = function (t){
        render(t, image3, image2);
        window.requestAnimationFrame(drawMe);
    };
    if(state.pos === 2) {
        TweenMax.to(state, 1, {pos: 0});
    }
    else {
        // image  = document.getElementById("image2");
        TweenMax.to(state, 1, {pos: 2});
    }

});

btn2.addEventListener("click", function(event){
    drawMe = function (t){
        render(t, image3, image);
        window.requestAnimationFrame(drawMe);
    };
    if(state.pos === 2) {
        TweenMax.to(state, 1, {pos: 0});
    }
    else {
        // image  = document.getElementById("image2");
        TweenMax.to(state, 1, {pos: 2});
    }

});


let cols = 50;
let rows = 50;
let delay;

let xw = 1800/cols;
let xh = 1200/rows;

function renderTempCanvas(t,img){
    newCtx.clearRect(0,0,1800,1200);
    newCtx.drawImage(img, 0, 0);
    //newCtx.clearRect(0,0,100 + t/10, 100 + t/10);


    xw = 1800/cols;
    xh = 1200/rows;
    for(let i = 0; i <=cols; i++){
        for(let j = 0; j <=rows; j++){
            delay = (j*i)/(cols*rows);
            newCtx.clearRect(i*xw, j*xh, xw*clamp(state.pos - delay, 0, 1), xh*clamp(state.pos - delay, 0, 1 ));
        }
    }



}

function clamp(number, min, max){
    if( number < min) {
        return min;
    }
    if ( number > max){
        return max;
    }
    else {
        return number;
    }
}

function render(t,img1,img2){

    ctx.drawImage(img1, 0, 0);

    renderTempCanvas(t,img2);

    ctx.drawImage(newCvs, 0, 0);
}

function setCanvasSize(cvs){
    cvs.width = 1800;
    cvs.height = 1200;
    cvs.style.width = "900px";
    cvs.style.height = "600px";
}

setCanvasSize(cvs);
setCanvasSize(newCvs);




drawMe();









